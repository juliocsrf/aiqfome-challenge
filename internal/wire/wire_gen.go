// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"database/sql"
	"github.com/juliocsrf/aiqfome-challenge/config"
	"github.com/juliocsrf/aiqfome-challenge/internal/adapter/http/chi/router"
)

// Injectors from injector.go:

func InitializeApp(db *sql.DB, conf *config.Conf) (*router.Router, error) {
	queries := ProvideQueries(db)
	customerRepository := ProvideCustomerRepository(queries)
	createCustomerUseCase := ProvideCreateCustomerUseCase(customerRepository)
	favoritesRepository := ProvideFavoritesRepository(queries)
	productRepository := ProvideProductRepository()
	findByIdCustomerUseCase := ProvideFindByIdCustomerUseCase(customerRepository, favoritesRepository, productRepository)
	editCustomerUseCase := ProvideEditCustomerUseCase(customerRepository)
	deleteCustomerUseCase := ProvideDeleteCustomerUseCase(customerRepository)
	customerHandler := ProvideCustomerHandler(createCustomerUseCase, findByIdCustomerUseCase, editCustomerUseCase, deleteCustomerUseCase)
	findAllProductUseCase := ProvideFindAllProductUseCase(productRepository)
	findByIdProductUseCase := ProvideFindByIdProductUseCase(productRepository)
	productHandler := ProvideProductHandler(findAllProductUseCase, findByIdProductUseCase)
	createFavoriteUseCase := ProvideCreateFavoriteUseCase(favoritesRepository, customerRepository, productRepository)
	deleteFavoriteUseCase := ProvideDeleteFavoriteUseCase(favoritesRepository, customerRepository, productRepository)
	favoriteHandler := ProvideFavoriteHandler(createFavoriteUseCase, deleteFavoriteUseCase)
	userRepository := ProvideUserRepository(queries)
	string2 := ProvideJWTSecret(conf)
	loginUseCase := ProvideLoginUseCase(userRepository, string2)
	refreshTokenUseCase := ProvideRefreshTokenUseCase(userRepository, string2)
	authHandler := ProvideAuthHandler(loginUseCase, refreshTokenUseCase)
	routerRouter := ProvideRouter(customerHandler, productHandler, favoriteHandler, authHandler, string2)
	return routerRouter, nil
}
