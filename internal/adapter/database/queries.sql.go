// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const deleteCustomer = `-- name: DeleteCustomer :exec
DELETE FROM customers WHERE id = $1
`

func (q *Queries) DeleteCustomer(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteCustomer, id)
	return err
}

const deleteFavoriteCustomerProduct = `-- name: DeleteFavoriteCustomerProduct :exec
DELETE FROM favorites WHERE customer_id = $1 AND product_id = $2
`

type DeleteFavoriteCustomerProductParams struct {
	CustomerID uuid.UUID
	ProductID  int64
}

func (q *Queries) DeleteFavoriteCustomerProduct(ctx context.Context, arg DeleteFavoriteCustomerProductParams) error {
	_, err := q.db.ExecContext(ctx, deleteFavoriteCustomerProduct, arg.CustomerID, arg.ProductID)
	return err
}

const findAllCustomers = `-- name: FindAllCustomers :many
SELECT id, name, email, created_at, updated_at FROM customers
`

func (q *Queries) FindAllCustomers(ctx context.Context) ([]Customer, error) {
	rows, err := q.db.QueryContext(ctx, findAllCustomers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Customer
	for rows.Next() {
		var i Customer
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findAllFavoriteProdutsFromCustomer = `-- name: FindAllFavoriteProdutsFromCustomer :many
SELECT customer_id, product_id, created_at FROM favorites WHERE customer_id = $1
`

func (q *Queries) FindAllFavoriteProdutsFromCustomer(ctx context.Context, customerID uuid.UUID) ([]Favorite, error) {
	rows, err := q.db.QueryContext(ctx, findAllFavoriteProdutsFromCustomer, customerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Favorite
	for rows.Next() {
		var i Favorite
		if err := rows.Scan(&i.CustomerID, &i.ProductID, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findCustomerById = `-- name: FindCustomerById :one
SELECT id, name, email, created_at, updated_at FROM customers WHERE id = $1
`

func (q *Queries) FindCustomerById(ctx context.Context, id uuid.UUID) (Customer, error) {
	row := q.db.QueryRowContext(ctx, findCustomerById, id)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findUserByEmail = `-- name: FindUserByEmail :one
SELECT id, name, email, password, created_at, updated_at FROM users WHERE email = $1
`

func (q *Queries) FindUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, findUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findUserById = `-- name: FindUserById :one
SELECT id, name, email, password, created_at, updated_at FROM users WHERE id = $1
`

func (q *Queries) FindUserById(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, findUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const insertCustomer = `-- name: InsertCustomer :exec
INSERT INTO customers (id, name, email) values ($1, $2, $3)
`

type InsertCustomerParams struct {
	ID    uuid.UUID
	Name  string
	Email string
}

func (q *Queries) InsertCustomer(ctx context.Context, arg InsertCustomerParams) error {
	_, err := q.db.ExecContext(ctx, insertCustomer, arg.ID, arg.Name, arg.Email)
	return err
}

const insertFavoriteCustomerProduct = `-- name: InsertFavoriteCustomerProduct :exec
INSERT INTO favorites (customer_id, product_id) VALUES ($1, $2)
`

type InsertFavoriteCustomerProductParams struct {
	CustomerID uuid.UUID
	ProductID  int64
}

func (q *Queries) InsertFavoriteCustomerProduct(ctx context.Context, arg InsertFavoriteCustomerProductParams) error {
	_, err := q.db.ExecContext(ctx, insertFavoriteCustomerProduct, arg.CustomerID, arg.ProductID)
	return err
}

const updateCustomer = `-- name: UpdateCustomer :exec
UPDATE customers SET name = $1, email = $2, updated_at = NOW() WHERE id = $3
`

type UpdateCustomerParams struct {
	Name  string
	Email string
	ID    uuid.UUID
}

func (q *Queries) UpdateCustomer(ctx context.Context, arg UpdateCustomerParams) error {
	_, err := q.db.ExecContext(ctx, updateCustomer, arg.Name, arg.Email, arg.ID)
	return err
}
