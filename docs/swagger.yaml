basePath: /api
definitions:
  auth.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  auth.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  auth.RefreshTokenRequest:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  customer.CreateCustomerRequest:
    properties:
      email:
        type: string
      name:
        type: string
    required:
    - email
    - name
    type: object
  customer.CustomerResponse:
    properties:
      email:
        type: string
      favorites:
        items:
          $ref: '#/definitions/customer.Product'
        type: array
      id:
        type: string
      name:
        type: string
    type: object
  customer.ErrorResponse:
    properties:
      error:
        type: string
      message:
        type: string
    type: object
  customer.Product:
    properties:
      id:
        type: integer
      image:
        type: string
      price:
        type: number
      title:
        type: string
    type: object
  customer.SuccessResponse:
    properties:
      message:
        type: string
    type: object
  customer.UpdateCustomerRequest:
    properties:
      email:
        type: string
      name:
        type: string
    required:
    - email
    - name
    type: object
  favorite.ErrorResponse:
    properties:
      error:
        type: string
      message:
        type: string
    type: object
  favorite.FavoriteResponse:
    properties:
      customer_id:
        type: string
      message:
        type: string
      product_id:
        type: integer
    type: object
  github_com_juliocsrf_aiqfome-challenge_internal_usecase_auth.LoginResponse:
    properties:
      accessToken:
        type: string
      expiresIn:
        type: integer
      refreshToken:
        type: string
    type: object
  github_com_juliocsrf_aiqfome-challenge_internal_usecase_auth.RefreshTokenResponse:
    properties:
      accessToken:
        type: string
      expiresIn:
        type: integer
    type: object
  product.ErrorResponse:
    properties:
      error:
        type: string
      message:
        type: string
    type: object
  product.ProductListResponse:
    properties:
      products:
        items:
          $ref: '#/definitions/product.ProductResponse'
        type: array
      total:
        type: integer
    type: object
  product.ProductResponse:
    properties:
      id:
        type: integer
      image:
        type: string
      price:
        type: number
      rate:
        type: number
      rate_count:
        type: integer
      title:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: API REST para gerenciamento de clientes, produtos e favoritos
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/
  title: AiQFome Challenge API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user with email and password
      parameters:
      - description: Login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_juliocsrf_aiqfome-challenge_internal_usecase_auth.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/auth.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/auth.ErrorResponse'
      summary: User login
      tags:
      - auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Get a new access token using refresh token
      parameters:
      - description: Refresh token
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_juliocsrf_aiqfome-challenge_internal_usecase_auth.RefreshTokenResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/auth.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/auth.ErrorResponse'
      summary: Refresh access token
      tags:
      - auth
  /customers:
    post:
      consumes:
      - application/json
      description: Create a new customer with name and email
      parameters:
      - description: Customer data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/customer.CreateCustomerRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/customer.CustomerResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/customer.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/customer.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new customer
      tags:
      - customers
  /customers/{customer_id}/favorites/{product_id}:
    delete:
      consumes:
      - application/json
      description: Remove a product from customer's favorites list
      parameters:
      - description: Customer ID
        in: path
        name: customer_id
        required: true
        type: string
      - description: Product ID
        in: path
        name: product_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/favorite.FavoriteResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/favorite.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/favorite.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/favorite.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Remove product from favorites
      tags:
      - favorites
    post:
      consumes:
      - application/json
      description: Add a product to customer's favorites list
      parameters:
      - description: Customer ID
        in: path
        name: customer_id
        required: true
        type: string
      - description: Product ID
        in: path
        name: product_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/favorite.FavoriteResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/favorite.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/favorite.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/favorite.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Add product to favorites
      tags:
      - favorites
  /customers/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a customer by ID
      parameters:
      - description: Customer ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/customer.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/customer.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/customer.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/customer.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete customer
      tags:
      - customers
    get:
      consumes:
      - application/json
      description: Get a customer by their ID including favorites
      parameters:
      - description: Customer ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/customer.CustomerResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/customer.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/customer.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/customer.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get customer by ID
      tags:
      - customers
    put:
      consumes:
      - application/json
      description: Update customer information
      parameters:
      - description: Customer ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated customer data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/customer.UpdateCustomerRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/customer.CustomerResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/customer.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/customer.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/customer.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update customer
      tags:
      - customers
  /products:
    get:
      consumes:
      - application/json
      description: Get all available products
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/product.ProductListResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/product.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/product.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List all products
      tags:
      - products
  /products/{id}:
    get:
      consumes:
      - application/json
      description: Get a specific product by ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/product.ProductResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/product.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/product.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/product.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get product by ID
      tags:
      - products
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
